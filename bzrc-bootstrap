# ================================================================
# This is intended to be sourced from bashrc.
# These are common things used in multiple rc scripts.
#
# Note that bash4 is widely available, but Macs often have bash3.
# ================================================================

# ----------------------------------------------------------------
# One of the tricks is getting the path to the file currently being sourced.
# When a bash script is executed , this is as simple as basename $0.
#
# For sourcing with bash, I use the ${BASH_SOURCE[]} array.
#
# Empirical finding: suppose the sourcing levels are
#
#   ~/.bash_profile
#   ~/.bashrc
#   ~/.bzrcs-public/init
#   ~/.bzrcs-public/second-level
#   ~/.bzrcs-public/third-level
#
# then I find that within ~/.bzrc-public/third-level the ${BASH_SOURCE[]} array entries are as
# follows:
#
#   [0] ~/.bashrc
#   [1] ~/.bzrcs-public/third-level
#   [2] ~/.bzrcs-public/second-level
#   [3] ~/.bzrcs-public/init
#   [4] ~/.bashrc
#   [5] ~/.bash_profile
#
# This shell function does that.
#
# For sourcing with zsh: when file 'foo' is sourced, $0 is 'foo' within it.  But
# within a shell function, $0 is the name of the function.  So for zsh we can't
# make a function which returns the name of the file being source: the caller
# itself needs to use $0.

__get_source_name() {
  if [ -z "$BASH_VERSION" ]; then # zsh
    echo 'BZRC: do not call __get_source_name for zsh: use $0'
    echo "nonesuch"
  else
    echo ${BASH_SOURCE[1]}
  fi
}

__set_verbose() {
  export __VERBOSE=true
}

__unset_verbose() {
  unset __VERBOSE
}

__maybe_say() {
  if [ "$__VERBOSE" = "true" ]; then
    echo "BZRC: $@"
  fi
}

if [ -f ~/.bzrc-verbose ]; then
  __set_verbose
fi

# ================================================================
# These help me keep track of source-code files:
# * Define and environment variable and an alias with a single command, not one
#   alias command and another export-variable command.
# * Protect referential integrity: make sure I can find names for files which
#   have been renamed or deleted.
# * Example use:
#     my_assign_file fa "/path/to/file/a.ext"
#     my_assign_dir  db "/path/to/directory/b"
#   Then I can do the following commands:
#
#     ls $fa  # list /path/to/file/a.ext
#     fa      # edit /path/to/file/a.ext
#
#     ls $db  # list /path/to/directory/b
#     db      # cd   /path/to/directory/b

# ----------------------------------------------------------------
# PRIVATE:

__my_assign_impl() {
  if [ $# -ne 3 ]; then
    echo "my_assign_file: need name and value as arguments; got $@"
  else
    local command="$1"
    local name="$2"
    local value="$3"

    alias $name="$command $value"
    eval export $name="$value"
  fi
}

__check_my_assign_dirs() {
  local verbose=false
  if [ $# -eq 1 ]; then
    verbose=true
  fi
  local entry
  for entry in $( env | grep my_assign_dir_); do
    local name=$(echo $entry | sed 's/=.*//' | sed 's/my_assign_dir_//')
    local value=$(echo $entry | sed 's/.*=//')
    if [ -d "$value" ]; then
      if [ "$verbose" = "true" ]; then
        echo "ok $name=$value"
      fi
    else
      echo "DOES NOT EXIST: $name=$value"
    fi
  done
}

__check_my_assign_files() {
  local verbose=false
  if [ $# -eq 1 ]; then
    verbose=true
  fi
  for entry in $( env | grep my_assign_file_); do
    name=$(echo $entry | sed 's/=.*//' | sed 's/my_assign_file_//')
    value=$(echo $entry | sed 's/.*=//')
    if [ -f "$value" ]; then
      if [ "$verbose" = "true" ]; then
        echo "ok $name=$value"
      fi
    else
      echo "DOES NOT EXIST: $name=$value"
    fi
  done
}

# ----------------------------------------------------------------
# PUBLIC:

__my_assign_file() {
  if [ $# -ne 2 ]; then
    echo "my_assign_file: need name and value as arguments; got $@"
  else
    local name="$1"
    local value="$2"

    __my_assign_impl vim "$name" "$value"
    export __my_assign_file_$name="$value"
  fi
}

__my_assign_dir() {
  if [ $# -ne 2 ]; then
    echo "my_assign_file: need name and value as arguments; got $@"
  else
    local name="$1"
    local value="$2"

    __my_assign_impl cd "$name" "$value"
    export __my_assign_dir_$name="$value"
  fi
}

# Use -v for verbose
__check_my_assigns() {
  __check_my_assign_dirs "$@"
  __check_my_assign_files "$@"
}
