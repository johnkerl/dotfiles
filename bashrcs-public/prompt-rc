# vim: set filetype=sh:

# ----------------------------------------------------------------
# This sets my prompt, using bash-prompt escapes and xterm text-coloring escapes.
#
# Requires ./color-rc to have been sourced first.
#
# Some bash-prompt escapes:
# \d: date
# \h: hostname
# \H: hostname.domainname
# \j: number of background jobs
# \t: time
# \u: username
# \v: Bash version
# \V: Extended bash version
# \w: pwd
# \W: basename of pwd

# Simpler predecessors:
# export PS1='`whoami`:`pwd`% '
# export PS1='\u@\h:\W% '

# Example:
# kerl@sprax[tmp]  jobs=1 dirs=2$ 
# \_____________/  \___________/|
#     green             red     green

# black white
# red   green   blue
# cyan  magenta yellow
if [ "`whoami`" = "root" ]; then
	  color1="$__text_red"
	  color2="$__text_yellow"
else
	  color1="$__text_yellow"
	  color2="$__text_yellow"
	  color3="$__text_green"
fi

# Notes:
#
# * show_jobs_and_dirs is just a C program which prints the "jobs=1 dirs=2" parts
#   when they are non-trivial.  I wrote it in C to avoid stack traces when ^C-ing
#   an empty prompt line.
#
# * The \[ \] around xterm escape sequences are important in shell prompts so that
#   the shell can properly compute the length of the prompt string which in turn
#   is essential to avoid screen-garbaging on history editing of long command lines.

if [ -z "$BASH_VERSION" ]; then # zsh
	export PS1="${__text_green}%n@%m[%c]${__text_red}[j%js%?]${__text_green}%#${__text_textdefault} "
else

	# Other conditions may certainly apply. For me in 2022 my main goal is distinguishing visually
	# from terminals on my Mac laptop from SSH sessions into a Linux EC2 instance.
	if [ $(uname) = "Darwin" ]; then
	  ps1_color1=$'\033[1;38;5;178m'
	  ps1_color2=$'\033[1;38;5;136m'
	  ps1_color3=$'\033[1;38;5;178m'
	  ps1_color4=$'\033[1;38;5;136m'
	else
	  ps1_color1=$'\033[1;38;5;208m'
	  ps1_color2=$'\033[1;38;5;94m'
	  ps1_color3=$'\033[1;38;5;208m'
	  ps1_color4=$'\033[1;38;5;94m'
	fi
	default=$'\033[0m'

	hostname=${HOSTNAME%%.*}
	if [ -f ~/.hostname-alias ]; then
		hostname=$(cat ~/.hostname-alias)
	fi

    export PS1="\n\[${ps1_color1}\]\u\[${ps1_color2}\]@\[${ps1_color3}\]${hostname}\[${ps1_color4}\]"

    # $PS1ENV is for various work/project-specific things, typically set up in ~/.bashrcs-private
    # which is intended to symlink to a private repo's rc scripts.
    if [ ! -z "$PS1ENV" ]; then
      PS1+="[\${PS1ENV}]"
    fi

    # Include current git branch in the prompt, if that's installed (see
    # https://github.com/johnkerl/scripts).
    git-show-current-branch-safe > /dev/null 2>&1 && PS1+='[$(git-show-current-branch-safe)]'

    # I want to show the last two components (at most) of the current directory
    # in my prompt. Bash 4 does this via PROMPT_DIRTRIM and \W;; for Bash 3
    # (MacOS even in the year 2025), I use a C program in my ~/bin/.
    export PROMPT_DIRTRIM=2
    if [ -x $HOME/bin/basenames ]; then
      PS1+='[$(basenames $PROMPT_DIRTRIM)]'
    else
      PS1+='[\W]'
    fi

    # Status of last shell command (sometimes useful).
    #PS1+='[$?]'

    # Mininal prompt.
    PS1+="$ "

    # End of prompt coloring.
    PS1+="\[${default}\]"

    # For copy/paste into gists etc.:
    # * more spare
    # * blank line before prompt
    export PSX="\n\[${ps1_color1}\]\u@$hostname[\W]\[${default}\] "
    alias psx='export PS1="$PSX"'
fi

# # For pathnicks.c in repo johnkerl/dotfiles
# export PATHNICKS="$mlb:MLR"
# export PATHNICKS="$PATHNICKS,$HOME/pub_http_internet/miller-releases:MLRREL"
# export PATHNICKS="$PATHNICKS,$HOME/git/fork:GIT-FORK"
# export PATHNICKS="$PATHNICKS,$HOME/git:GIT-MAIN"
