# vim: set filetype=sh:

# ----------------------------------------------------------------
# This sets my prompt, using bash-prompt escapes and xterm text-coloring escapes.
#
# Requires ./color-rc to have been sourced first.
#
# Some bash-prompt escapes:
# \d: date
# \h: hostname
# \H: hostname.domainname
# \j: number of background jobs
# \t: time
# \u: username
# \v: Bash version
# \V: Extended bash version
# \w: pwd
# \W: basename of pwd

# Simpler predecessors:
# export PS1='`whoami`:`pwd`% '
# export PS1='\u@\h:\W% '

# Example:
# kerl@sprax[tmp]  jobs=1 dirs=2$
# \_____________/  \___________/|
#     green             red     green

# Notes:
#
# * The \[ \] around xterm escape sequences are important in shell prompts so that
#   the shell can properly compute the length of the prompt string which in turn
#   is essential to avoid screen-garbaging on history editing of long command lines.
# ----------------------------------------------------------------

if [ -z "$BASH_VERSION" ]; then # zsh
  # These colors from ./color-rc which should be sourced before this file.

  setopt PROMPT_SUBST
  set -o emacs

  # Other conditions may certainly apply. For me in 2022 my main goal is distinguishing visually
  # from terminals on my Mac laptop from SSH sessions into a Linux EC2 instance.
  if [ $(uname) = "Darwin" ]; then
    # Artisanal shades of orange and brown
    __ps1_color1='%F{172}'
    __ps1_color2='%F{130}'
    __ps1_color3='%F{172}'
    __ps1_color4='%F{130}'
  else
    # Artisanal shades of yellow
    __ps1_color1='%F{179}'
    __ps1_color2='%F{136}'
    __ps1_color3='%F{179}'
    __ps1_color4='%F{136}'
  fi
  __text_default='%f'

  __hostname='%m'
  if [ -f ~/.hostname-alias ]; then
      __hostname=$(cat ~/.hostname-alias)
  fi

  # From the web:
  #
  # %F{color}: Sets the foreground color.
  # %f: Resets the foreground color to the default.
  # %K{color}: Sets the background color.
  # %k: Resets the background color to the default.
  # %B: Starts bold text.
  # %b: Stops bold text.
  # %U: Starts underlining.
  # %u: Stops underlining.
  # Color Specification:
  # Named Colors: Zsh supports standard color names like black, red, green, yellow, blue, magenta, cyan, and white.
  # Numbered Colors: For a wider range of colors, you can use numbers from 0 to
  #   255 to reference colors from the 256-color palette.
  # Hexadecimal Colors: You can also use hex color codes in the format %F{#RRGGBB}.

  export PS1="$(echo "")${__ps1_color1}%n${__ps1_color2}@${__ps1_color3}${__hostname}${__ps1_color4}"

  # $PS1ENV is for various work/project-specific things, typically set up in ~/.bzrcs-private
  # which is intended to symlink to a private repo's rc scripts.
  if [ ! -z "$PS1ENV" ]; then
    PS1+="[\${PS1ENV}]"
  fi

  # Include the current git branch in the prompt, if that command is installed (see
  # https://github.com/johnkerl/scripts).
  git-show-current-branch-safe > /dev/null 2>&1 && PS1+='[$(git-show-current-branch-safe)]'

  # I want to show the last two components (at most) of the current directory
  # in my prompt. Bash 4 does this via PROMPT_DIRTRIM and \W;; for Bash 3
  # (MacOS even in the year 2025), I use a C program in my ~/bin/.
  export PROMPT_DIRTRIM=2
  if [ -x $HOME/bin/basenames ]; then
    PS1+='[$(basenames $PROMPT_DIRTRIM)]'
  else
    PS1+='[%c]'
  fi

  # Status of last shell command (sometimes useful).
  # PS1+='[%?]'

  # Mininal prompt.
  PS1+="%% "

  # End of prompt coloring.
  PS1+="${__text_default}"

  # Handy access to a short prompt for when I want to run comnands and
  # copy/paste into gists etc..
  export PSX="\n${__ps1_color1}\u@%n[%c]${__text_default} "
  alias psx='export PS1="$PSX"'

else # bash

  # Other conditions may certainly apply. For me in 2022 my main goal is distinguishing visually
  # from terminals on my Mac laptop from SSH sessions into a Linux EC2 instance.
  if [ $(uname) = "Darwin" ]; then
    __ps1_color1=$'\033[1;38;5;178m'
    __ps1_color2=$'\033[1;38;5;136m'
    __ps1_color3=$'\033[1;38;5;178m'
    __ps1_color4=$'\033[1;38;5;136m'
  else
    __ps1_color1=$'\033[1;38;5;208m'
    __ps1_color2=$'\033[1;38;5;94m'
    __ps1_color3=$'\033[1;38;5;208m'
    __ps1_color4=$'\033[1;38;5;94m'
  fi

  __hostname=${HOSTNAME%%.*}
  if [ -f ~/.hostname-alias ]; then
      __hostname=$(cat ~/.hostname-alias)
  fi

  export PS1="\n\[${__ps1_color1}\]\u\[${__ps1_color2}\]@\[${__ps1_color3}\]${__hostname}\[${__ps1_color4}\]"

  # $PS1ENV is for various work/project-specific things, typically set up in ~/.bzrcs-private
  # which is intended to symlink to a private repo's rc scripts.
  if [ ! -z "$PS1ENV" ]; then
    PS1+="[\${PS1ENV}]"
  fi

  # Include the current git branch in the prompt, if that command is installed (see
  # https://github.com/johnkerl/scripts).
  git-show-current-branch-safe > /dev/null 2>&1 && PS1+='[$(git-show-current-branch-safe)]'

  # I want to show the last two components (at most) of the current directory
  # in my prompt. Bash 4 does this via PROMPT_DIRTRIM and \W;; for Bash 3
  # (MacOS even in the year 2025), I use a C program in my ~/bin/.
  export PROMPT_DIRTRIM=2
  if [ -x $HOME/bin/basenames ]; then
    PS1+='[$(basenames $PROMPT_DIRTRIM)]'
  else
    PS1+='[\W]'
  fi

  # Status of last shell command (sometimes useful).
  #PS1+='[$?]'

  # Mininal prompt.
  PS1+="$ "

  # End of prompt coloring.
  # __text_default is from colorrc which should be sourced before this file.
  PS1+="\[${__text_default}\]"

  # Handy access to a short prompt for when I want to run comnands and
  # copy/paste into gists etc..
  export PSX="\n\[${__ps1_color1}\]\u@$__hostname[\W]\[${__text_default}\] "
  alias psx='export PS1="$PSX"'
fi

# # For pathnicks.c in repo johnkerl/dotfiles
# export PATHNICKS="$mlb:MLR"
# export PATHNICKS="$PATHNICKS,$HOME/pub_http_internet/miller-releases:MLRREL"
# export PATHNICKS="$PATHNICKS,$HOME/git/fork:GIT-FORK"
# export PATHNICKS="$PATHNICKS,$HOME/git:GIT-MAIN"
