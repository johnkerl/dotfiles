# vim: set filetype=sh:

# ================================================================
# John Kerl's bash aliases and shell functions, 1992-2013 and onward ...

# Don't do this for non-interactive shells
if [ "${-/i/}" = "$-" ] ; then
  return 0
fi

# ================================================================
# First, simple aliases.

UNAME=$(uname)

# -j.5: search results in middle of screen, not top-line (which is default).
# -r: render ANSI color codes as such.
# Setting $LESS makes git diff et al. do things I don't like; use an alias instead.
# export LESS="-j.5 -r"
alias less='less -r'
# See also vars file

# I do not prefer -i aliases.
unalias cp 2> /dev/null
unalias mv 2> /dev/null
unalias rm 2> /dev/null

alias minpath='export PATH=/usr/bin:/bin:/usr/local/bin; export PS1="MINPATH\$ "'

alias 1='fg %1'
alias 2='fg %2'
alias 3='fg %3'
alias 4='fg %4'
alias 5='fg %5'
alias 6='fg %6'
alias 7='fg %7'
alias 8='fg %8'
alias 9='fg %9'

alias  bb='pbpaste'
alias bbv='pbpaste | vim -'

alias cls=clear
alias h='history 30'
alias j='jobs -l'

alias     R='R --no-save -q'
alias   rbq='R CMD build --no-build-vignettes --no-manual .'
alias   riq='R CMD INSTALL --no-byte-compile --no-test-load --no-docs --no-html .'
alias  rbiq='rbq && riq'
alias rbaiq='R -e "roxygen2::roxygenise()" && R -e "pkgdown::build_site()" && rbq && riq'
alias   rbi='R CMD build . && R CMD INSTALL .'
alias   rox="R -e 'roxygen2::roxygenise()'"
alias   pbs="R -e 'pkgdown::build_site()'"

# Since "java" is a leading substring of "javac", "!java" doesn't work right in
# an edit-compile loop.  Hence, these two.  Likewise for scalac and scala.
alias jvc=javac
alias jvr=java
#alias si=scala
#alias sc=scalac
#alias sr=scala
#alias st='scala org.scalatest.tools.Runner -p . -o -s'
alias grep='grep --color=auto'

# For Python REPL with my most-used modules pre-loaded:
#alias py='python -Qnew -i ~/.mypy'

if [ "$UNAME" = "Darwin" ]; then
  alias ls='ls -G'
else
  alias ls='ls --color=tty'
fi
alias ll='ls -l'
alias lll='ls -lL'
alias llh='ls -lh'
# Biggest files last:
alias lss='ls -Slr'
# Most recent files last:
alias lt='ls -lrt'

alias nnbu='nbu -d ~/Desktop/folder/bak'
alias v='vim'
alias nn='nnbu ~/Desktop/PLAN/PLAN.txt'
alias vv='vim ~/Desktop/PLAN/PLAN.txt'
alias v-='vim -'  # E.g. for "diff ... | vim -":
alias vt='vim -t' # Tag jump
alias vim='vim -i NONE -X'
tvim() {
  title $(basename $@)
  vim "$@"
}
ttvim() {
  title "$@"
  vim "$@"
}
# Edit "$variablename" but put "variablename" in the title bar
vvim() {
  name="$1"
  val=$(eval echo '$'"$name")
  if [ -z "$val" ]; then
    echo "Couldn't expand \$$name."
  else
    title "$name"
    vim "$val"
  fi
}

alias ppx='pingety-ping 8.8.8.8'

alias    gl='git log -n 5'
alias    gs='git status'
alias    gd='git diff'
alias   gd1='git diff HEAD~ HEAD'
alias   gd2='git diff HEAD~2 HEAD'
alias  gd12='git diff HEAD~2 HEAD~1'
alias    ga='git add'
alias   gam='git add $(git status | grep modified: | sed "s/ *modified: *//" | cpick 1)'
alias   gcm='git commit -m'
alias   gca='git commit --amend --date $(systime) --no-edit'
alias  gcae='git commit --amend --date $(systime)'
alias  gcam='git commit --amend -m'
alias  gcmc='git commit -m "$(cat gcm.txt)"'
alias    gp='git push'
alias   gpf='git push --force'
alias  gaap='gam && echo "" && gca && echo "" && gpf'
alias   gsl='git sl ...upstream/main'
alias   grc='git rebase --continue'
alias   gla='git log --graph --all'
alias  glog='git log --oneline --graph'
alias gloga='git log --oneline --graph --all'
alias  gprm='git pull --rebase origin main'
alias gprmr='git pull --rebase origin master'

# from https://github.com/johnkerl/scripts/tree/main/git
alias     gsb='git show-current-branch'
alias     sbs='git show-branches'
alias     gcb='git checkout'
alias     gnb='git new-branch'
alias     gdb='git delete-branch'
alias     gmb='git merge'
alias    gddb='git delete-branch-force'
alias     g2b='git switch-branch'
alias    gpom='git pull origin main'
alias     gff='git files-from'

alias     bcd='black . --check'

# ----------------------------------------------------------------
# Miller
. ~/.vars-tracker

my_assign_dir mlb   "$HOME/git/johnkerl/miller"
my_assign_dir mld   "$mlb/docs"
my_assign_dir mlds  "$mlb/docs/src"
my_assign_dir mman  "$mlb/man"

alias five='PATH=../c:$PATH'
alias  six='PATH=../go:$PATH'

alias vvv='vim $mlb/todo.txt'

my_assign_dir  pkg    "internal/pkg"
my_assign_dir  mlv    "internal/pkg/mlrval"
my_assign_dir  bifs   "internal/pkg/bifs"
my_assign_file bnf    "internal/pkg/parsing/mlr.bnf"
my_assign_dir  ast    "internal/pkg/dsl/"
my_assign_file astt   "internal/pkg/dsl/ast_types.go"
my_assign_file astb   "internal/pkg/dsl/ast_build.go"
my_assign_file astp   "internal/pkg/dsl/ast_print.go"
my_assign_dir  cli    "internal/pkg/cli"
my_assign_dir  clim   "internal/pkg/climain"
my_assign_dir  clu    "internal/pkg/cliutil"
my_assign_dir  cst    "internal/pkg/dsl/cst"
my_assign_dir  lib    "internal/pkg/lib"
my_assign_dir  inp    "internal/pkg/input"
my_assign_dir  tra    "internal/pkg/transformers"
my_assign_dir  outp   "internal/pkg/output"
my_assign_dir  types  "internal/pkg/types"
my_assign_file put    "internal/pkg/transformers/put-or-filter.go"
my_assign_file udf    "internal/pkg/dsl/cst/udf.go"
my_assign_file uds    "internal/pkg/dsl/cst/uds.go"
my_assign_file mlrmap "internal/pkg/types/mlrmap.go"
my_assign_file mlrval "internal/pkg/types/mlrval.go"
my_assign_file stream "internal/pkg/stream/stream.go"
my_assign_file stack  "internal/pkg/runtime/stack.go"
my_assign_file typing "internal/pkg/types/mlrval_typing.go"
my_assign_dir  repl   "internal/pkg/auxents/repl"
my_assign_file hofs   "$cst/hofs.go"
my_assign_file exv    "docs/src/example.csv"

my_assign_file dflags "reference-main-flag-list.md.in"
my_assign_file dverbs "reference-verbs.md.in"
my_assign_file dfuncs "reference-dsl-builtin-functions.md.in"
my_assign_file dgloss "glossary.md.in"

alias clonemiller='git clone https://github.com/johnkerl/miller'
alias     mygroff='groff -man -Tascii'
alias        bake='make -f Makefile.no-autoconfig'

alias         mds='mkdocs serve'
alias         mdb='mkdocs build'

alias        mrpl='rlwrap mlr repl'
alias          mr='make && mlr regtest'

# ================================================================
# For pathnicks.c in repo johnkerl/dotfiles
export PATHNICKS="$mlb:MLR"
export PATHNICKS="$PATHNICKS,$HOME/pub_http_internet/miller-releases:MLRREL"
export PATHNICKS="$PATHNICKS,$HOME/git/fork:GIT-FORK"
export PATHNICKS="$PATHNICKS,$HOME/git:GIT-MAIN"

# ================================================================
# Next are some shell functions.  The main deliverables are vimr and cd2file.
# These enable vim and cd to find files several levels deep, which is
# particularly important for Java development wherein package naming forces
# several levels of directories.

# ----------------------------------------------------------------
# file2dir:
# * Given a file name, searches for it recursively downward from the pwd.
# * I don't use this directly but it's used by cd2file and vimr.
# * If exactly one such file is found, prints to stdout the name of the
#   directory containing that file and returns 0 (success).
# * On failure, prints a message to stderr and prints nothing to stdout;
#   exits with 1 (failure).
# * Wildcards may be used as long as they're escaped, to get them past initial
#   shell globbing so that they can reach here unglobbed.
#
# Examples:
# * bash$ file2dir CommonFileName.java
#   Sorry, multiple matches (> 10).
#
# * bash$ file2dir MoreSpecificPattern\*.java
#   Sorry, multiple matches:
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern1.java
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern2.java
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern3.java
#
# * bash$ file2dir AnotherFileName.java
#    ./java/src/org/johnkerl/packagename
#
# ----------------------------------------------------------------
# John Kerl, 2010-06-18
# ----------------------------------------------------------------

file2dir () {
	if [ $# -eq 0 ]; then
		echo "$FUNCNAME: Need an argument." 1>&2
		return 1
	elif [ $# -ne 1 ]; then
		echo "$FUNCNAME: Need just one argument." 1>&2
		return 1
	fi
	local arg="$1"
	local paths="$(find . -follow -name $arg)"
	local num_found=$(echo "$paths" | wc -w)
	if [ $num_found -gt 10 ]; then
		echo "Sorry, multiple matches (> 10)." 1>&2
		return 1
	elif [ $num_found -gt 1 ]; then
		echo "Sorry, multiple matches:" 1>&2
		local path="" # keep local for iterator
		for path in $paths; do
			echo "  " $path 1>&2
		done
		return 1
	fi
	if [ $num_found -lt 1 ]; then
		echo "Couldn't find $arg." 1>&2
		return 1
	fi
	local dir=$(dirname $paths)
	if [ -z "$dir" ]; then
		echo "Oddity in $FUNCNAME in ~/.aliases: dir name is \"\"." 1>&2
		return 1
	fi
	if [ ! -d "$dir" ]; then
		echo "$FUNCNAME: Not cd'ing to \"$dir\" since it's not a directory." 1>&2
		echo "This is weird." 1>&2
		return 1
	fi
	echo $dir
	return 0
}

# ----------------------------------------------------------------
# cd2file:
# * Given a file name, searches for it recursively downward from the pwd.
# * If exactly one such file is found, chdirs the shell to the directory
#   containing that file.
# * On failure, prints a message to stderr and does not chdir the shell.
# * Wildcards may be used as long as they're escaped, to get them past initial
#   shell globbing so that they can reach here unglobbed.

# Examples:
# * bash$ file2dir CommonFileName.java
#   Sorry, multiple matches (> 10).
#
# * bash$ file2dir MoreSpecificPattern\*.java
#   Sorry, multiple matches:
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern1.java
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern2.java
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern3.java
#
# * bash$ cd2file AnotherFileName.java
#   cd'ing to:
#    ./java/src/org/johnkerl/packagename
#
# ----------------------------------------------------------------
# John Kerl, 2010-06-18
# ----------------------------------------------------------------

cd2file() {
	dir=$(file2dir "$@")
	if [ $? -ne 0 ]; then
		# An error message was already printed out by file2dir.
		return 1
	fi
	echo "  cd'ing to:"
	echo "  $dir"
	cd $dir && return 0 # Normal
	return 1 # Failure
}

pushd2file() {
	dir=$(file2dir "$@")
	if [ $? -ne 0 ]; then
		# An error message was already printed out by file2dir.
		return 1
	fi
	echo "  pushd'ing to:"
	echo "  $dir"
	pushd $dir && return 0 # Normal
	return 1 # Failure
}

# ----------------------------------------------------------------
# vimr:  does not chdir the shell but does edit the file.
vimr() {
	dir=$(file2dir "$@")
	if [ $? -ne 0 ]; then
		# An error message was already printed out by file2dir.
		return 1
	fi
	vim $dir/"$@"
}

# ------------------------------------------------------------------------------
cdwhich() {
    local cmd
    local path

    cmd="$1"
    path=$(which $cmd)
    if [ $? -ne 0 ]; then
	echo "Can't find dir for \"$cmd\""
    else
	dir=$(dirname $path)
	cd $dir
    fi
}

# ================================================================
# Reminders:
# git clone ssh://git@github.com/johnkerl/scripts
# jq '.|select(.key=="value")' filename.json
