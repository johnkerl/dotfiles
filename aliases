# vim: set filetype=sh:

# ================================================================
# John Kerl's bash aliases and shell functions, 1992-2013 and onward ...

# ================================================================
# First, simple aliases.

UNAME=$(uname)

# I do not prefer -i aliases.
unalias cp 2> /dev/null
unalias mv 2> /dev/null
unalias rm 2> /dev/null

alias minpath='export PATH=/usr/bin:/bin:/usr/local/bin; export PS1="MINPATH\$ "'

alias 1='fg %1'
alias 2='fg %2'
alias 3='fg %3'
alias 4='fg %4'
alias 5='fg %5'
alias 6='fg %6'
alias 7='fg %7'
alias 8='fg %8'
alias 9='fg %9'

alias cls=clear
alias h='history 10'
alias j='jobs -l'

# Since "java" is a leading substring of "javac", "!java" doesn't work right in
# an edit-compile loop.  Hence, jc and jr.  Likewise for scalac and scala.
alias jc=javac
alias jr=java
#alias si=scala
#alias sc=scalac
#alias sr=scala
#alias st='scala org.scalatest.tools.Runner -p . -o -s'
alias grep='grep --color=auto'

# For Python REPL with my most-used modules pre-loaded:
#alias py='python -Qnew -i ~/.mypy'

if [ "$UNAME" = "Darwin" ]; then
  alias ls='ls -G'
else
  alias ls='ls --color=tty'
fi
alias ll='ls -l'
alias lll='ls -lL'
alias llh='ls -lh'
# Biggest files last:
alias lss='ls -Slr'
# Most recent files last:
alias lt='ls -lrt'

alias v='vim'
alias vv='vim todo.txt'
alias v-='vim -'  # E.g. for "diff ... | vim -":
alias vt='vim -t' # Tag jump
alias vim='vim -i NONE -X'
tvim() {
  title $(basename $@)
  vim "$@"
}
ttvim() {
  title "$@"
  vim "$@"
}
# Edit "$variablename" but put "variablename" in the title bar
vvim() {
  name="$1"
  val=$(eval echo '$'"$name")
  if [ -z "$val" ]; then
    echo "Couldn't expand \$$name."
  else
    title "$name"
    vim "$val"
  fi
}
alias tt=title # https://github.com/johnkerl/scripts

alias   gl='git log -n 5'
alias   gs='git status'
alias   gd='git diff'
alias  gd1='git diff HEAD~ HEAD'
alias  gd2='git diff HEAD~2 HEAD'
alias gd12='git diff HEAD~2 HEAD~1'
#alias  gam='git add $(git status | grep modified | nf)'
alias   ga='git add'
alias  gam='git add $(git status | grep modified: | sed "s/ *modified: *//" | cpick 1)'
alias  gcm='git commit -m'
alias  gca='git commit --amend'
alias gcam='git commit --amend -m'
alias gcmc='git commit -m "$(cat gcm.txt)"'
alias gsl='git sl ...upstream/master'
alias  gb='git branch'
alias  gc='git checkout'

# ----------------------------------------------------------------
# Miller
. ~/.vars-tracker

my_assign_dir mlb "$HOME/pub_http_internet/miller-releases/miller-head"
my_assign_dir mlc "$HOME/pub_http_internet/miller-releases/miller-head/c"
my_assign_dir mld "$HOME/pub_http_internet/miller-releases/miller-head/doc"
my_assign_dir mll "$HOME/pub_http_internet/miller-releases/miller-head/c/dsls"

my_assign_dir  mlg    "$HOME/pub_http_internet/miller-releases/miller-head/go"
my_assign_file bnf    "src/miller/parsing/mlr.bnf"
my_assign_file ast    "src/miller/dsl/ast.go"
my_assign_dir  cli    "src/miller/cli"
my_assign_dir  cst    "src/miller/dsl/cst"
my_assign_dir  lib    "src/miller/lib"
my_assign_dir  inp    "src/miller/input"
my_assign_dir  map    "src/miller/mappers"
my_assign_dir  outp   "src/miller/output"
my_assign_dir  types  "src/miller/types"
my_assign_file mlrmap "src/miller/types/mlrmap.go"
my_assign_file mlrval "src/miller/types/mlrval.go"

export    indir="$mlc/reg_test/input"
export   outdir="$mlc/output-regtest"

alias        bake='make -f Makefile.no-autoconfig'
alias clonemiller='git clone https://github.com/johnkerl/miller'
alias     mygroff='groff -man -Tascii'
alias    macbakes='make -C ../c -f Makefile.no-autoconfig mlrg installhome && make -C ../doc -f Makefile.no-autoconfig all installhome'

# ================================================================
# Next are some shell functions.  The main deliverables are vimr and cd2file.
# These enable vim and cd to find files several levels deep, which is
# particularly important for Java development wherein package naming forces
# several levels of directories.

# ----------------------------------------------------------------
# file2dir:
# * Given a file name, searches for it recursively downward from the pwd.
# * I don't use this directly but it's used by cd2file and vimr.
# * If exactly one such file is found, prints to stdout the name of the
#   directory containing that file and returns 0 (success).
# * On failure, prints a message to stderr and prints nothing to stdout;
#   exits with 1 (failure).
# * Wildcards may be used as long as they're escaped, to get them past initial
#   shell globbing so that they can reach here unglobbed.
#
# Examples:
# * bash$ file2dir CommonFileName.java
#   Sorry, multiple matches (> 10).
#
# * bash$ file2dir MoreSpecificPattern\*.java
#   Sorry, multiple matches:
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern1.java
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern2.java
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern3.java
#
# * bash$ file2dir AnotherFileName.java
#    ./java/src/org/johnkerl/packagename
#
# ----------------------------------------------------------------
# John Kerl, 2010-06-18
# ----------------------------------------------------------------

file2dir () {
	if [ $# -eq 0 ]; then
		echo "$FUNCNAME: Need an argument." 1>&2
		return 1
	elif [ $# -ne 1 ]; then
		echo "$FUNCNAME: Need just one argument." 1>&2
		return 1
	fi
	local arg="$1"
	local paths="$(find . -follow -name $arg)"
	local num_found=$(echo "$paths" | wc -w)
	if [ $num_found -gt 10 ]; then
		echo "Sorry, multiple matches (> 10)." 1>&2
		return 1
	elif [ $num_found -gt 1 ]; then
		echo "Sorry, multiple matches:" 1>&2
		local path="" # keep local for iterator
		for path in $paths; do
			echo "  " $path 1>&2
		done
		return 1
	fi
	if [ $num_found -lt 1 ]; then
		echo "Couldn't find $arg." 1>&2
		return 1
	fi
	local dir=$(dirname $paths)
	if [ -z "$dir" ]; then
		echo "Oddity in $FUNCNAME in ~/.aliases: dir name is \"\"." 1>&2
		return 1
	fi
	if [ ! -d "$dir" ]; then
		echo "$FUNCNAME: Not cd'ing to \"$dir\" since it's not a directory." 1>&2
		echo "This is weird." 1>&2
		return 1
	fi
	echo $dir
	return 0
}

# ----------------------------------------------------------------
# cd2file:
# * Given a file name, searches for it recursively downward from the pwd.
# * If exactly one such file is found, chdirs the shell to the directory
#   containing that file.
# * On failure, prints a message to stderr and does not chdir the shell.
# * Wildcards may be used as long as they're escaped, to get them past initial
#   shell globbing so that they can reach here unglobbed.

# Examples:
# * bash$ file2dir CommonFileName.java
#   Sorry, multiple matches (> 10).
#
# * bash$ file2dir MoreSpecificPattern\*.java
#   Sorry, multiple matches:
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern1.java
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern2.java
#    ./java/src/org/johnkerl/packagename/MoreSpecificPattern3.java
#
# * bash$ cd2file AnotherFileName.java
#   cd'ing to:
#    ./java/src/org/johnkerl/packagename
#
# ----------------------------------------------------------------
# John Kerl, 2010-06-18
# ----------------------------------------------------------------

cd2file() {
	dir=$(file2dir "$@")
	if [ $? -ne 0 ]; then
		# An error message was already printed out by file2dir.
		return 1
	fi
	echo "  cd'ing to:"
	echo "  $dir"
	cd $dir && return 0 # Normal
	return 1 # Failure
}

pushd2file() {
	dir=$(file2dir "$@")
	if [ $? -ne 0 ]; then
		# An error message was already printed out by file2dir.
		return 1
	fi
	echo "  pushd'ing to:"
	echo "  $dir"
	pushd $dir && return 0 # Normal
	return 1 # Failure
}

# ----------------------------------------------------------------
# vimr:  does not chdir the shell but does edit the file.
vimr() {
	dir=$(file2dir "$@")
	if [ $? -ne 0 ]; then
		# An error message was already printed out by file2dir.
		return 1
	fi
	vim $dir/"$@"
}

# ------------------------------------------------------------------------------
cdwhich() {
    local cmd
    local path

    cmd="$1"
    path=$(which $cmd)
    if [ $? -ne 0 ]; then
	echo "Can't find dir for \"$cmd\""
    else
	dir=$(dirname $path)
	cd $dir
    fi
}

# ================================================================
# Reminders:
# git clone ssh://git@github.com/johnkerl/scripts
# jq '.|select(.key=="value")' filename.json
